import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import FilterControls from './FilterControls';
import EmployeeSortControls from './EmployeeSortControls';
import { getDateRowClass, getSortIndicator, getStatusBadge, getSeverityBadge, renderHoursWithDetails, renderTimeVertically, renderDifferences } from '../utils/displayUtils';
export default function CombinedDataTable({ combinedData, paginatedGroups, totalGroups, currentPage, setCurrentPage, itemsPerPage, setItemsPerPage, searchTerm, setSearchTerm, badgeFilters, toggleBadgeFilter, toggleAllFilters, employeeSort, handleEmployeeSort, employeeGroupSort, handleEmployeeGroupSort, downloadCsv }) {
    // Paginator control
    const totalPages = Math.ceil(totalGroups / itemsPerPage);
    // Handler for employee sort column click
    const handleEmployeeSortClick = (column) => {
        handleEmployeeSort(column);
    };
    return (_jsxs("div", { className: "combined-data-table", children: [_jsxs("div", { className: "row mb-3 align-items-center", children: [_jsx("div", { className: "col-md-3", children: _jsxs("div", { className: "input-group", children: [_jsx("input", { type: "text", className: "form-control", placeholder: "Search by AFM, Name...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value) }), _jsxs("button", { className: "btn btn-outline-secondary", type: "button", onClick: () => downloadCsv(combinedData, 'ergani-data.csv'), children: [_jsx("i", { className: "bi bi-download" }), " CSV"] })] }) }), _jsx("div", { className: "col-md-9", children: _jsx(FilterControls, { badgeFilters: badgeFilters, toggleBadgeFilter: toggleBadgeFilter, toggleAllFilters: toggleAllFilters, searchTerm: searchTerm, setSearchTerm: setSearchTerm, resetPage: () => setCurrentPage(1) }) })] }), _jsx(EmployeeSortControls, { sortConfig: employeeGroupSort, onSort: handleEmployeeGroupSort }), paginatedGroups.length > 0 ? (_jsxs(_Fragment, { children: [paginatedGroups.map((group) => (_jsxs("div", { className: "card mb-4 employee-card", children: [_jsx("div", { className: "card-header", children: _jsx("div", { className: "row", children: _jsxs("div", { className: "col", children: [_jsx("strong", { children: "Last Name:" }), " ", group.data[0]["Last Name"], ' | ', _jsx("strong", { children: "First Name:" }), " ", group.data[0]["First Name"], ' | ', _jsx("strong", { children: "AFM:" }), " ", group.afm] }) }) }), _jsx("div", { className: "card-body p-0", children: _jsx("div", { className: "table-responsive", children: _jsxs("table", { className: "table table-bordered table-striped table-hover mb-0", children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsxs("th", { className: "cursor-pointer", onClick: () => handleEmployeeSortClick('Status'), children: ["Status ", getSortIndicator(employeeSort.column, 'Status', employeeSort.direction)] }), _jsxs("th", { className: "cursor-pointer", onClick: () => handleEmployeeSortClick('Date'), children: ["Date ", getSortIndicator(employeeSort.column, 'Date', employeeSort.direction)] }), _jsxs("th", { className: "cursor-pointer", onClick: () => handleEmployeeSortClick('ScheduledTime'), children: ["Scheduled Time ", getSortIndicator(employeeSort.column, 'ScheduledTime', employeeSort.direction)] }), _jsxs("th", { className: "cursor-pointer", onClick: () => handleEmployeeSortClick('ActualTime'), children: ["Actual Time ", getSortIndicator(employeeSort.column, 'ActualTime', employeeSort.direction)] }), _jsxs("th", { className: "cursor-pointer", onClick: () => handleEmployeeSortClick('Hours'), children: ["Hours ", getSortIndicator(employeeSort.column, 'Hours', employeeSort.direction)] }), _jsxs("th", { className: "cursor-pointer", onClick: () => handleEmployeeSortClick('Difference'), children: ["Difference ", getSortIndicator(employeeSort.column, 'Difference', employeeSort.direction)] }), _jsxs("th", { className: "cursor-pointer", onClick: () => handleEmployeeSortClick('Severity'), children: ["Severity ", getSortIndicator(employeeSort.column, 'Severity', employeeSort.direction)] })] }) }), _jsx("tbody", { children: group.data.map((row, rowIndex) => {
                                                    // Get date for row
                                                    const dateStr = row["Schedule Start Date"] || row["Date"] || '';
                                                    const isHoliday = row["Is Holiday"] === 'True';
                                                    return (_jsxs("tr", { className: getDateRowClass(dateStr, isHoliday), children: [_jsx("td", { children: getStatusBadge(row.Summary || '') }), _jsxs("td", { children: [dateStr, isHoliday && _jsx("span", { className: "badge bg-info ms-1", children: "Holiday" })] }), _jsx("td", { children: renderTimeVertically(row["Schedule Start Time"] || '', row["Schedule End Time"] || '') }), _jsx("td", { children: renderTimeVertically(row["Actual Start Time"] || '', row["Actual End Time"] || '') }), _jsx("td", { children: renderHoursWithDetails(row) }), _jsx("td", { children: renderDifferences(row["Start Diff"] || '', row["Finish Diff"] || '', row.Summary && row.Summary.includes("Total diff:")
                                                                    ? row.Summary.split("Total diff:")[1].trim()
                                                                    : '') }), _jsx("td", { children: getSeverityBadge(row.Severity || '') })] }, rowIndex));
                                                }) })] }) }) })] }, group.afm))), _jsxs("div", { className: "d-flex justify-content-between align-items-center mb-4", children: [_jsxs("div", { className: "d-flex align-items-center", children: [_jsx("label", { htmlFor: "itemsPerPage", className: "me-2", children: "Items per page:" }), _jsxs("select", { id: "itemsPerPage", className: "form-select form-select-sm", value: itemsPerPage, onChange: (e) => setItemsPerPage(Number(e.target.value)), children: [_jsx("option", { value: "10", children: "10" }), _jsx("option", { value: "25", children: "25" }), _jsx("option", { value: "50", children: "50" }), _jsx("option", { value: "100", children: "100" })] }), _jsxs("span", { className: "ms-3", children: ["Showing ", paginatedGroups.length, " of ", totalGroups, " employees"] })] }), _jsx("nav", { "aria-label": "Page navigation", children: _jsxs("ul", { className: "pagination mb-0", children: [_jsx("li", { className: `page-item ${currentPage === 1 ? 'disabled' : ''}`, children: _jsx("button", { className: "page-link", onClick: () => setCurrentPage(Math.max(currentPage - 1, 1)), disabled: currentPage === 1, children: "Previous" }) }), Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                            // Calculate which page numbers to show
                                            let pageNum = i + 1;
                                            if (totalPages > 5) {
                                                if (currentPage <= 3) {
                                                    pageNum = i + 1;
                                                }
                                                else if (currentPage >= totalPages - 2) {
                                                    pageNum = totalPages - 4 + i;
                                                }
                                                else {
                                                    pageNum = currentPage - 2 + i;
                                                }
                                            }
                                            return (_jsx("li", { className: `page-item ${currentPage === pageNum ? 'active' : ''}`, children: _jsx("button", { className: "page-link", onClick: () => setCurrentPage(pageNum), children: pageNum }) }, pageNum));
                                        }), _jsx("li", { className: `page-item ${currentPage === totalPages ? 'disabled' : ''}`, children: _jsx("button", { className: "page-link", onClick: () => setCurrentPage(Math.min(currentPage + 1, totalPages)), disabled: currentPage === totalPages, children: "Next" }) })] }) })] })] })) : (_jsx("div", { className: "alert alert-info", children: "No data found matching your criteria." }))] }));
}

import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import PaginationControls from './PaginationControls';
import { getSortIndicator, getHoursDiffClass } from '../utils/displayUtils';
export default function SummaryDataTable({ summaryData, paginatedSummary, summaryPage, setSummaryPage, summaryPerPage, setSummaryPerPage, summarySearch, setSummarySearch, summarySort, handleSummarySort, downloadCsv }) {
    const handleItemsPerPageChange = (e) => {
        setSummaryPerPage(Number(e.target.value));
        setSummaryPage(1); // Reset to first page
    };
    const handleSearchChange = (e) => {
        setSummarySearch(e.target.value);
        setSummaryPage(1); // Reset to first page
    };
    return (_jsxs("section", { id: "summarySection", className: "mb-4", children: [_jsxs("div", { className: "d-flex justify-content-between align-items-center mb-3", children: [_jsx("h3", { children: "Employee Summary" }), _jsxs("div", { className: "d-flex gap-2", children: [_jsxs("select", { className: "form-select", value: summaryPerPage, onChange: handleItemsPerPageChange, style: { width: 'auto' }, children: [_jsx("option", { value: "5", children: "5 per page" }), _jsx("option", { value: "10", children: "10 per page" }), _jsx("option", { value: "25", children: "25 per page" }), _jsx("option", { value: "50", children: "50 per page" })] }), _jsx("button", { className: "btn btn-outline-secondary", onClick: () => downloadCsv(summaryData, 'summary_data.csv'), disabled: !summaryData || summaryData.length === 0, children: "Download CSV" })] })] }), _jsx("div", { className: "mb-3", children: _jsx("div", { className: "row", children: _jsx("div", { className: "col-md-4", children: _jsx("input", { type: "text", className: "form-control", placeholder: "Search by employee ID...", value: summarySearch, onChange: handleSearchChange }) }) }) }), _jsx("div", { className: "table-responsive custom-table-container", children: _jsxs("table", { className: "table table-striped table-bordered", children: [_jsx("thead", { children: _jsxs("tr", { children: [_jsxs("th", { className: "sortable", onClick: () => handleSummarySort('AFM'), children: ["Employee ID ", getSortIndicator(summarySort.column, 'AFM', summarySort.direction)] }), _jsxs("th", { className: "sortable", onClick: () => handleSummarySort('PLANNED_HOURS'), children: ["Planned Hours ", getSortIndicator(summarySort.column, 'PLANNED_HOURS', summarySort.direction)] }), _jsxs("th", { className: "sortable", onClick: () => handleSummarySort('ACTUAL_HOURS'), children: ["Actual Hours ", getSortIndicator(summarySort.column, 'ACTUAL_HOURS', summarySort.direction)] }), _jsxs("th", { className: "sortable", onClick: () => handleSummarySort('DIFFERENCE_HOURS'), children: ["Difference ", getSortIndicator(summarySort.column, 'DIFFERENCE_HOURS', summarySort.direction)] }), _jsxs("th", { className: "sortable", onClick: () => handleSummarySort('MISSED_DAYS'), children: ["Missed Days ", getSortIndicator(summarySort.column, 'MISSED_DAYS', summarySort.direction)] }), _jsxs("th", { className: "sortable", onClick: () => handleSummarySort('FORGOT_TO_CLOCK_IN_OUT'), children: ["Forgot Clock In/Out ", getSortIndicator(summarySort.column, 'FORGOT_TO_CLOCK_IN_OUT', summarySort.direction)] })] }) }), _jsx("tbody", { children: paginatedSummary.length > 0 ? (paginatedSummary.map((row, idx) => {
                                const diff = parseFloat(row.DIFFERENCE_HOURS) || 0;
                                return (_jsxs("tr", { children: [_jsx("td", { children: row.AFM }), _jsx("td", { children: parseFloat(row.PLANNED_HOURS).toFixed(2) }), _jsx("td", { children: parseFloat(row.ACTUAL_HOURS).toFixed(2) }), _jsx("td", { className: getHoursDiffClass(diff), children: diff.toFixed(2) }), _jsx("td", { children: row.MISSED_DAYS }), _jsx("td", { children: row.FORGOT_TO_CLOCK_IN_OUT })] }, idx));
                            })) : (_jsx("tr", { children: _jsx("td", { colSpan: 6, className: "text-center", children: "No summary records found matching your search criteria." }) })) })] }) }), summaryData.length > 0 && (_jsx(PaginationControls, { currentPage: summaryPage, setPage: setSummaryPage, totalItems: summaryData.length, itemsPerPage: summaryPerPage }))] }));
}
